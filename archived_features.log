# Archived Features Log - Improvisation-First Simplification
# Minimal cuts preserving architectural capability (July 12, 2025)

## TIMESTAMP: 2025-07-12T12:30:00

## STRATEGY: Simplify default workflow while preserving all architectural power

## MINOR CUTS - WORKFLOW SIMPLIFICATION

### Feature: Multi-Phase Orchestrated Case Creation (Default Behavior)
**Description:** Complex backbone→obstacles→solution orchestration as default workflow
**Files:** Current default behavior in scripts/create_new_game_orchestrator.py
**Impact:** Remove complex default, replace with simple inspiration→opening workflow
**Preservation:** Keep orchestration capability for future complex cases
**Last commit:** ed767ae
**Restoration:** git show ed767ae:scripts/create_new_game_orchestrator.py > scripts/create_new_game_orchestrator_complex.py

### Feature: Complex Case Structure Templates (Default)
**Description:** Pre-built backbone/, obstacles/, solution/ directory scaffolding as default
**Files:** Default templates in case scaffolding
**Impact:** Remove from simple workflow, preserve capability
**Preservation:** Scaffolding system remains fully functional
**Last commit:** ed767ae
**Restoration:** Complex scaffolding available via configuration flags

### Feature: Detailed Methodology Documentation (Current Focus)
**Description:** Extensive orchestration procedures in CLAUDE.md
**Files:** Current CLAUDE.md sections on complex workflows
**Impact:** Streamline to focus on simple workflow
**Preservation:** Archive complex procedures, keep core case-making principles
**Last commit:** ed767ae
**Restoration:** git show ed767ae:CLAUDE.md > CLAUDE_complex_methodology.md

## PRESERVED SYSTEMS - FULL ARCHITECTURAL CAPABILITY

### Configuration System
**Files:** config/case_patterns.json, scripts/case_config.py
**Status:** PRESERVED - Adding simple pattern as new default
**Capability:** Full extensibility for future case complexity

### Case Scaffolding System  
**Files:** scripts/case_scaffolding.py
**Status:** PRESERVED - Full capability maintained
**Capability:** Can create any directory structure via configuration

### Game State Management
**Files:** scripts/game_state_manager.py
**Status:** PRESERVED - All complexity handling maintained
**Capability:** Gates, trials, evidence, character trust, dice, saves

### ChatGPT Consultation System
**Files:** scripts/chatgpt_consultant.py  
**Status:** PRESERVED - Full flexibility maintained
**Capability:** Multiple consultation types, complex prompting

### Testing Framework
**Files:** tests/
**Status:** PRESERVED - Full test coverage maintained
**Capability:** Quality assurance for all system components

### Documentation Examples
**Files:** docs/examples/, docs/reference/, docs/troubleshooting/
**Status:** PRESERVED - All examples maintained
**Capability:** Support for simple and complex workflows

### Core Gameplay Systems
**Files:** scripts/game_state_manager.py, scripts/random_word_inspiration.py, scripts/dice_system.py, scripts/real_life_inspiration.py
**Status:** PRESERVED - Zero changes
**Capability:** Full improvisation and state management power

## NEW SIMPLE DEFAULT WORKFLOW

### Phase 1: Inspiration + Case Creation
1. Run real_life_inspiration.py → get case details
2. Create case directory with case name  
3. Save real_life_case_summary.txt

### Phase 2: Opening Scene Generation
1. Send summary to ChatGPT with opening scene prompt
2. Save response as case_opening.txt
3. Append "type 'next' to continue"

### Phase 3: Ready for Gameplay
1. Simple case structure: just summary + opening files
2. Full game state management available
3. All improvisation tools ready

## CONFIGURATION UPDATES

### New Simple Pattern in case_patterns.json
```json
{
  "simple_improvisation": {
    "description": "Lightweight improvisation-first cases",
    "required_files": ["real_life_case_summary.txt", "case_opening.txt"],
    "optional_directories": ["game_state", "saves"],
    "gates": ["opening", "investigation", "trial"],
    "trial_trigger_after": 1,
    "supports_complex_scaffolding": true
  }
}
```

## RESTORATION PATHWAYS

**Restore complex orchestration:** Rename current orchestrator, restore complex version
**Restore complex CLAUDE.md:** git show ed767ae:CLAUDE.md > CLAUDE_complex_methodology.md
**Enable complex scaffolding:** Use configuration flags in existing scaffolding system
**Access complex examples:** All preserved in docs/examples/

## BENEFITS OF MINIMAL-CUT APPROACH

- **Immediate simplicity:** New users get simple workflow
- **Preserved power:** All architectural capability intact  
- **Easy scaling:** Configuration-driven complexity when needed
- **Zero regression risk:** No core systems modified
- **Future-proof:** Ready for complexity growth without rebuilding

## IMPLEMENTATION NOTES

- Existing cases in previous_cases/ remain fully functional
- All scripts maintain backward compatibility
- Testing framework covers both simple and complex paths
- Documentation supports both workflow types
- Admin mode preserved for strategic system management