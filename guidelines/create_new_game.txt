# Guidelines for Creating New Games
## Lessons Learned from V1-V5 Development

### Core Principle: Collaborative AI Design
The breakthrough approach combines Claude's logical consistency with ChatGPT's creative obstacles. Each AI does what it does best without compromising the other's strengths.

# Phase 0: Generate real life inspiration

This script will generate a random page from the NSW Court of Criminal Appeals AUSTLII database, encrypted in base64 to avoid spoilers:

python3 real_life_inspiration.py --encrypt

Use this to inspire details of the case during its development.

Because these cases are derived from real life, there may be details that you can't apply to your own (fictional) case due to your in-built safety/ethical guardrails. If this occurs consult with ChatGPT to "fill in the blanks" and determine alternative events in-keeping with the Ace Attorney universe. 

## Phase 1: Build the Logical Backbone (Claude Only)

### DO:
- Create a case that CAN be solved through logical deduction
- Build clear evidence chains that connect crime → motive → perpetrator
- Ensure all character knowledge is internally consistent
- Design a "primrose path" that leads to the truth
- Make timelines and physical evidence align perfectly
- Create realistic character motivations based on actual human psychology

### DON'T:
- Try to make it challenging yet - focus purely on logical consistency
- Add obstacles or misdirection - that comes later
- Worry about pacing or drama - that's ChatGPT's job
- Make evidence impossible to obtain - just make it logically available
- Create contradictory character knowledge or impossible timelines

### File Structure:
```
new_game/
├── backbone/              # Logical foundation (NOT encoded)
│   ├── case_structure.json
│   ├── evidence_chain.json
│   ├── character_facts.json
│   └── truth_timeline.json
├── obstacles/             # For ChatGPT's work
├── solution/             # Final encoded files
└── game_state/           # Player progress
```

### Quality Check:
- Can every piece of evidence be logically connected?
- Do character motivations make realistic sense?
- Is the timeline physically possible?
- Would this case hold up in a real court?

## Phase 2: Design Obstacles (ChatGPT Consultation)

### ChatGPT's Role:
- Take the logical backbone and make it HARD to navigate
- Design realistic obstacles that don't break logic
- Create hostile characters with believable reasons to resist
- Add misdirection that misleads without contradicting facts
- Rate the case for excitement and dramatic tension

### Consultation Prompt Template:
```
CASE BACKBONE: [Insert backbone files]

Design obstacles that:
1. Make witnesses hostile/uncooperative without breaking their logical knowledge
2. Hide evidence behind realistic challenges (bureaucracy, personal conflicts, etc.)
3. Create misdirection that doesn't contradict established facts
4. Make the client appear MORE guilty initially
5. Force the player to work hard for every piece of information

EXCITEMENT CHECK: Rate this case 1-10 for drama and suggest improvements.
```

### Obstacle Types That Work:
- **Bureaucratic barriers:** Evidence locked behind paperwork/permissions
- **Personal conflicts:** Characters dislike the player for believable reasons
- **Emotional resistance:** Witnesses traumatized or scared to talk
- **Professional obligations:** Doctors/lawyers bound by confidentiality
- **Blackmail/coercion:** Characters afraid to reveal what they know
- **Jurisdictional issues:** Evidence in wrong department/location

### Obstacle Types That DON'T Work:
- Impossible evidence (contradicts physics/timeline)
- Characters lying about facts they couldn't know
- Evidence that doesn't exist in the logical backbone
- Obstacles that make the case unsolvable
- Misdirection that requires retconning established facts

## Phase 3: Integration and Validation

### Logic Validation (Claude):
- Check every obstacle against the logical backbone
- Ensure no contradictions are introduced
- Verify that all evidence remains obtainable
- Confirm character knowledge stays consistent

### Common Validation Failures:
- Character hiding information they logically wouldn't know
- Evidence made impossible to obtain
- Timeline contradictions introduced by obstacles
- Character motivations that don't align with backbone facts

### Back-and-Forth Process:
1. Claude validates obstacles against backbone
2. If violations found, send specific feedback to ChatGPT
3. ChatGPT revises obstacles to fix logic issues
4. Repeat until both logic (10/10) and excitement (8+/10) achieved
5. Maximum 5 rounds to prevent endless iteration

### Final Integration:
- Combine backbone + validated obstacles
- Create encoded solution files
- Program challenge gates based on obstacle design
- Test that case remains both logical and challenging

## Phase 4: Quality Assurance

### Success Metrics:
- **Logic Consistency:** 10/10 (no contradictions allowed)
- **Excitement Level:** 8+/10 (genuinely compelling)
- **Challenge Balance:** Evidence hard to get but obtainable
- **Character Authenticity:** Hostile but realistically so
- **Narrative Satisfaction:** Player earns every breakthrough

### Red Flags:
- Player getting helpful information easily
- Characters being cooperative without reason
- Evidence appearing without effort
- Linear progression without obstacles
- Contradictory character knowledge
- Impossible timelines or evidence

## Key Insights from V1-V5 Development:

### What Failed:
- **V1:** Logically consistent but boring (no obstacles)
- **V2:** Better characters but wrong structure (investigation solved everything)
- **V3:** Crashed from complexity (too ambitious)
- **V4:** Still too helpful (primrose path problem)

### What Succeeded:
- **V5:** Logical backbone + creative obstacles = engaging challenge
- File-based state management works perfectly
- Base64 encoding prevents spoilers
- Iterative collaboration between AIs creates best results

### The "Too Helpful" Problem:
AI systems naturally want to help by making things easier. The solution is to channel this helpfulness into creating FAIR challenges rather than easy solutions.

## Implementation Notes:

### For Claude Code:
- Always build backbone first before consulting ChatGPT
- Validate every obstacle against logical consistency
- Use file system for state management
- Keep solution files encoded
- Focus on logical precision over drama

### For ChatGPT Integration:
- Use API calls with specific constraint prompts
- Iterate based on validation feedback
- Rate excitement level and suggest improvements
- Design obstacles that enhance rather than break backbone

### For Player Experience:
- Investigation should feel like uphill battle
- Evidence should require genuine detective work
- Characters should be hostile but not impossible
- Case should build tension throughout
- Victory should feel earned through clever deduction

## Final Recommendation:
The V5 hybrid approach represents the breakthrough in AI game design. Use it as the template for all future games, always remembering: Claude builds the logical foundation, ChatGPT adds the challenging obstacles, and iteration ensures both logic and excitement are achieved.